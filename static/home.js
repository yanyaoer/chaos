// Generated by CoffeeScript 1.6.3
(function() {
  var $, Pen, Q, moment, query, react;

  Pen = require("pen");

  $ = require('semantic-ui');

  Q = require("q");

  react = require("react");

  moment = require("moment");

  query = require("querystring");

  $(function() {
    var handler, page;
    page = {
      nav: $("#navigator"),
      data: [],
      active: {},
      fetch: function() {
        return $.get('/api/fetch' + window.location.search).done(function(e) {
          var d;
          d = JSON.parse(e);
          page.data = d.res;
          return page.user = d.user;
        });
      },
      bind: function() {
        window._is_owner = function() {
          return page.user === page.active.user;
        };
        return react(page).on('change data', function(modify, origin) {
          return jade.render(page.nav[0], 'nav', {
            nav: page.data
          });
        }).on('change active', function(modify, origin) {
          clearInterval(window.autosave);
          console.log(page.active);
          if (!page.active._id) {
            jade.render($('.article')[0], 'write');
          } else {
            if (!('tag' in page.active)) {
              page.active.tag = [];
            }
            jade.render($('.article')[0], 'page', page.active);
            $('.article-content').html(page.active.content);
          }
          $('.avatar').popup({
            position: 'top right'
          });
          page.nav.find('.active').removeClass('active');
          if (page.active._id) {
            page.nav.find("[_id=" + page.active._id + "]").addClass('active');
          }
          if (!page.active._id || (page.user === page.active.user)) {
            return page.edit();
          }
        });
      },
      edit: function() {
        var field, save;
        field = $('.article-title, .article-content, .article-tag');
        console.log(field);
        new Pen({
          editor: field[1],
          stay: false
        });
        save = function() {
          var content, idx, postdata, tag, title, uri;
          uri = page.active._id ? "/article/?id=" + page.active._id : '/write/';
          tag = $('.article-tag').val();
          title = $('.article-title').val();
          content = $('.article-content').html();
          if (!page.active._id || tag !== page.active.tag.join(',') || content !== page.active.content || title !== page.active.title) {
            idx = page.data.indexOf(page.active);
            if (idx < 0) {
              idx = 0;
            }
            page.active.tag = tag;
            page.active.title = title;
            page.active.content = content;
            postdata = query.stringify(page.active);
            $.post(uri, postdata, function(res) {
              return page.active._id = res;
            });
            page.active.tag = tag.split(',');
            return page.data[idx] = page.active;
          }
        };
        window.autosave = setInterval(save, 15000);
        return field.on('blur', save);
      },
      notify: function(html, color) {
        var el;
        el = $($.parseHTML("<div class='notify ui compact " + (color || 'red') + " message'>" + html + "</div>"));
        $(document.body).append(el);
        return setTimeout(function() {
          el.fadeOut(1000, function() {
            return el.remove();
          });
          return 2000;
        });
      },
      init: function() {
        return Q.fcall(page.bind).then(page.fetch).then(handler.router)["catch"](function(err) {
          return console.dir(err, arguments);
        }).done(function() {
          var el, _i, _len, _ref, _results;
          _ref = document.querySelectorAll('.date');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _results.push(el.innerText = moment(+el.innerText).fromNow());
          }
          return _results;
        });
      }
    };
    handler = {
      router: function() {
        return $(window).on('hashchange load', function(e) {
          var arg, args;
          args = window.location.hash.split('/');
          console.log(args);
          console.log(args && args[1] in handler);
          if (args && args[1] in handler) {
            arg = query.parse(args[2].replace('?', ''));
            return handler[args[1]](arg);
          } else {
            return handler.home();
          }
        });
      },
      home: function() {
        return page.active = page.data[0];
      },
      compose: function() {
        return page.active = {
          user: page.user
        };
      },
      article: function(arg) {
        var filted;
        filted = page.data.filter(function(d) {
          return d._id === arg.id;
        });
        if (filted.length) {
          return page.active = filted[0];
        } else {
          return page.notify('article not found');
        }
      }
    };
    return page.init();
  });

}).call(this);

/*
//@ sourceMappingURL=home.map
*/
